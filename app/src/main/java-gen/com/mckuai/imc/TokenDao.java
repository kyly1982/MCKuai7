package com.mckuai.imc;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "Token".
 */
public class TokenDao extends AbstractDao<Token, Long> {

    public static final String TABLENAME = "Token";

    /**
     * Properties of entity Token.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "type");
        public final static Property UserId = new Property(2, Integer.class, "userId", false, "userId");
        public final static Property Birthday = new Property(3, Long.class, "birthday", false, "birthday");
        public final static Property Expires = new Property(4, Long.class, "expires", false, "expires");
        public final static Property Token = new Property(5, String.class, "token", false, "token");
    }


    public TokenDao(DaoConfig config) {
        super(config);
    }

    public TokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Token\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"type\" INTEGER," + // 1: type
                "\"userId\" INTEGER," + // 2: userId
                "\"birthday\" INTEGER," + // 3: birthday
                "\"expires\" INTEGER," + // 4: expires
                "\"token\" TEXT NOT NULL );" +// 5: token
                ""); //5:userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Token\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Token entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }

        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }

        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(4, birthday);
        }

        Long expires = entity.getExpires();
        if (expires != null) {
            stmt.bindLong(5, expires);
        }
        stmt.bindString(6, entity.getToken());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Token readEntity(Cursor cursor, int offset) {
        Token entity = new Token(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // userId
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // birthday
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // expires
                cursor.getString(offset + 5) // token
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Token entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBirthday(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setExpires(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setToken(cursor.getString(offset + 5));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Token entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Token entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public long insertOrReplace(Token entity) {
        //return super.insertOrReplace(entity);
        if (null == entity.getId()) {
            return insert(entity);
        } else if (isTokenExist(entity)) {
            update(entity);
        } else {
            return insert(entity);
        }

        return super.insertOrReplace(entity);
    }

    private boolean isTokenExist(Token token) {
        return true;
    }

    @Override
    public long insert(Token entity) {

        return super.insert(entity);
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
